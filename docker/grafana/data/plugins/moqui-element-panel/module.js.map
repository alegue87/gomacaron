{"version":3,"file":"module.js","mappings":"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","sources":["webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"react\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./elementPanel.tsx","webpack:///./editor.tsx","webpack:///./module.ts"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__305__;","module.exports = __WEBPACK_EXTERNAL_MODULE__388__;","module.exports = __WEBPACK_EXTERNAL_MODULE__650__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { InterpolateFunction, PanelProps } from '@grafana/data';\n//import { getAppEvents, getBackendSrv, getDataSourceSrv } from '@grafana/runtime';\nimport { Button, HorizontalGroup, Slider, VerticalGroup } from '@grafana/ui';\nimport React, { useEffect } from 'react';\nimport { ButtonOptions, SliderOptions, Options } from 'types';\n\ninterface Props extends PanelProps<Options> {}\n\nasync function postQuery(button: ButtonOptions, currentValue: any, replaceVariables: InterpolateFunction) {\n  const url = replaceVariables(button.url || '' )\n  console.log(url)\n  let api_key: any = replaceVariables('$api_key') // definirla come costante tra le globali\n  let host_port: any = replaceVariables('$host_port') \n  let deviceId: any = replaceVariables('$deviceId') \n\n\n  // url: \"http://localhost:8080/rest/s1/example/examples?exampleTypeEnumId=EXT_CONTRIVED&statusId=EXST_IN_DESIGN&exampleName=\"+data['param']+'&deviceId='+data['deviceId'],\n\n  // http://localhost:8080http://localhost:8080/apps/example/Example/FindExample/SliderMin?value=x\n  $.ajax({\n    type: 'GET',\n    url: host_port + button['url'] + '?value=' + currentValue + '&deviceId=' + deviceId,\n    headers:{\n      'api_key': api_key\n    },\n      success: function (result) {\n        console.log('done')\n    },\n      error: function (error) { \n        console.log('Error')\n    }\n  })\n  //const ds = await getDataSourceSrv().get(button.datasource);\n  //const appEvents = getAppEvents();\n  /*\n  try {\n    const resp = await getBackendSrv().datasourceRequest({\n      method: 'POST',\n      url: 'api/ds/query',\n      data: {\n        queries: [\n          {\n            datasourceId: ds.id,\n            refId: '1',\n            ...payload,\n          },\n        ],\n      },\n    });\n    appEvents.publish({\n      type: AppEvents.alertSuccess.name,\n      payload: [text + ': ' + resp.status + ' (' + resp.statusText + ')'],\n    });\n  } catch (error: any) {\n    appEvents.publish({\n      type: AppEvents.alertError.name,\n      payload: [text + ': ' + error.status + ' (' + error.statusText + ') ' + error.data.message],\n    });\n  }\n  */\n}\n\nexport const ElementPanel: React.FC<Props> = ({ options, replaceVariables }) => {\n  let cacheSlidersList: SliderOptions[] = []\n  const [slidersValue, setSlidersValue] = React.useState<SliderOptions[]>(cacheSlidersList);\n\n  const renderButtons = (buttons: ButtonOptions[]) => {\n    return buttons.map((b: ButtonOptions, index: number) => {\n      const text = b.text || 'Button';\n      return (\n        <Button key={index} variant={b.variant} onClick={async () => postQuery(b, b.text, replaceVariables)}>\n          {text}\n        </Button>\n      );\n    });\n    \n  };\n\n  useEffect(() => {\n    options.sliders.map((s: SliderOptions, index: number) => {\n\n      let api_key: any = replaceVariables('$api_key') // definirla come costante tra le globali\n      let host_port: any = replaceVariables('$host_port') \n      let deviceId: any = replaceVariables('$deviceId') \n\n  \n      // url: \"http://localhost:8080/rest/s1/example/examples?exampleTypeEnumId=EXT_CONTRIVED&statusId=EXST_IN_DESIGN&exampleName=\"+data['param']+'&deviceId='+data['deviceId'],\n      // http://localhost:8080http://localhost:8080/apps/example/Example/FindExample/SliderMin\n      $.ajax({\n        type: 'GET',\n        url: host_port + s.url + '?getCurrentValue&deviceId=' + deviceId,\n        headers:{\n          'api_key': api_key\n        },\n          success: function (result) {\n            console.log(result.deviceId + ' ' + s.text + ' ' + result.value)\n            console.log()\n            let slider: SliderOptions = structuredClone(s)\n            slider.currentValue = result.value\n            slidersValue[index] = slider\n            setSlidersValue(slidersValue.concat([])); // force reload\n        },\n          error: function (error) { \n            console.log('Errore nel recupero del valore dello slider dalla query ajax: ' + host_port + s.url + '&getCurrentValue')\n        }\n      })\n    })\n       // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const renderSliders = (cacheSliders: SliderOptions[], sliders: SliderOptions[], orient: any) => {\n    return sliders.map((s: SliderOptions, index: number) => {\n\n      const text = s.text || 'Slider';\n      const value = (typeof cacheSliders[index] !== 'undefined') ? cacheSliders[index].currentValue : undefined\n      return (\n        <div key={index}\n          style={{\n            height: s.height ? s.height : '300px',\n            width: s.width ? s.width: '300px'\n          }}\n        >\n          <span>\n            <span style={{textAlign: 'center', width: '100%', display: 'block', paddingLeft: '11px'}}> {text} </span>\n            { value !== undefined &&\n            <Slider \n                  included\n                  key={index} onChange={async (v) => postQuery(s, v, replaceVariables)}\n                  orientation={orient} \n                  value={value}\n                  step={0.1}\n                  min={s.min? s.min : 0}\n                  max={s.max ? s.max : 100}/>\n            }\n          </span>       \n        </div>\n\n      );\n    });\n    \n  };\n  // visualizza bottoni o sliders\n  return (\n    (options.orientation === 'vertical' && ( \n      <VerticalGroup justify=\"center\" align=\"center\">\n        {options.buttons.length > 0 ? renderButtons(options.buttons) : renderSliders(slidersValue, options.sliders, 'horizontal')}\n      </VerticalGroup>\n    )) || (\n      <HorizontalGroup justify=\"center\" align=\"center\">\n        {options.buttons.length > 0 ? renderButtons(options.buttons) : renderSliders(slidersValue, options.sliders, 'vertical,')}\n      </HorizontalGroup>\n    )\n  );\n};\n","import { PanelOptionsEditorBuilder } from '@grafana/data';\n//import { getBackendSrv } from '@grafana/runtime';\nimport { Button, Collapse, Field, Input, RadioButtonGroup, TextArea } from '@grafana/ui';\nimport React from 'react';\nimport { ButtonOptions, SliderOptions, Options } from 'types';\n\nexport interface EditorButtonProps {\n  buttons: ButtonOptions[];\n  onChange: (buttons: ButtonOptions[]) => void;\n}\n\nexport interface EditorSliderProps {\n  sliders: SliderOptions[];\n  onChange: (sliders: SliderOptions[]) => void;\n}\n\nexport const EditorButton: React.FC<EditorButtonProps> = ({ buttons, onChange }) => {\n  //const [elems, setElems] = React.useState<Array<SelectableValue<string>>>();\n  const [isOpen, setOpen] = React.useState<boolean[]>(buttons.map((e) => false));\n  const [cacheButtons, setCacheButtons] = React.useState<ButtonOptions[]>(buttons);\n  /*React.useEffect(() => {\n    let cancel = false;\n    const fetchData = async () => {\n      const ds = await getBackendSrv().get('/api/datasources');\n      if (!cancel) {\n        setElems(ds.map((i: any) => ({ label: i.name, value: i.name, name: i.name })));\n      }\n    };\n    fetchData();\n    return (): void => {\n      cancel = true;\n    };\n  }, []);*/\n\n  const updateCacheButtons = (index: number, newButton: ButtonOptions) => {\n    let currentButton = { ...cacheButtons[index] };\n    setCacheButtons([\n      ...cacheButtons.slice(0, index),\n      {\n        text: newButton.text || currentButton.text,\n        //datasource: newButton.datasource || currentButton.datasource,\n        url: newButton.url || currentButton.url,\n        variant: newButton.variant || currentButton.variant,\n      },\n      ...cacheButtons.slice(index + 1),\n    ]);\n  };\n\n  return (\n    <React.Fragment>\n      {cacheButtons.map((b: ButtonOptions, i: number) => (\n\n        <Collapse\n          key={i}\n          label={'Button ' + (i + 1).toString()}\n          isOpen={isOpen[i]}\n          collapsible\n          onToggle={() => {\n            setOpen((open) => [...open.slice(0, i), !open[i], ...open.slice(i + 1)]);\n          }}\n        >\n          <Field label=\"Text\" description={\"Text to be displayed on the button\"}>\n            <Input\n              id={'t-' + i.toString()}\n              value={b.text}\n              placeholder=\"Button\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateCacheButtons(i, { text: e.target.value })}\n            />\n          </Field>\n          {/*<Field label=\"Datasource\" description=\"Choose the Datasource for the query\">\n            <Select\n              onChange={(e: SelectableValue<string>) => updateCacheButtons(i, { datasource: e.value })}\n              value={b.datasource}\n              options={elems}\n            />\n        </Field>*/}\n          <Field label=\"Url\" description=\"Url to call on click\">\n            <TextArea\n              id={'q-' + i.toString()}\n              value={b.url}\n              placeholder=\"http://...\"\n              rows={5}\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => updateCacheButtons(i, { url: e.target.value })}\n            />\n          </Field>\n          <Field label=\"Color\" description=\"Color of the button\">\n            <RadioButtonGroup\n              options={[\n                { label: 'Primary', value: 'primary' },\n                { label: 'Secondary', value: 'secondary' },\n                { label: 'Destructive', value: 'destructive' },\n                { label: 'Link', value: 'link' },\n              ]}\n              value={b.variant || 'primary'}\n              fullWidth\n              onChange={(e: any) => updateCacheButtons(i, { variant: e })}\n            ></RadioButtonGroup>\n          </Field> \n          <Field>\n            <>\n              <Button\n                icon=\"trash-alt\"\n                variant=\"destructive\"\n                onClick={() => onChange([...buttons.slice(0, i), ...buttons.slice(i + 1)])}\n              >\n                Delete\n              </Button>\n              <Button icon=\"save\" variant=\"primary\" onClick={() => onChange(cacheButtons)}>\n                Apply\n              </Button>\n            </>\n          </Field>\n        </Collapse>\n      ))}\n      <Field>\n        <Button\n          variant=\"secondary\"\n          icon=\"plus\"\n          size=\"sm\"\n          onClick={() => {\n            onChange([...buttons, { text: '', url: ''}]);\n          }}\n        >\n          Add Button\n        </Button>\n      </Field>\n    </React.Fragment>\n  );\n};\n\nexport const EditorSlider: React.FC<EditorSliderProps> = ({ sliders, onChange }) => {\n  //const [elems, setElems] = React.useState<Array<SelectableValue<string>>>();\n  const [isOpen, setOpen] = React.useState<boolean[]>(sliders.map((e) => false));\n  const [cacheSliders, setCacheSliders] = React.useState<SliderOptions[]>(sliders);\n\n  /*setElems([\n    { label: 'Vertical', value: 'vertical', name: 'vertical' },\n    { label: 'Horizontal', value: 'horizontal', name: 'horizontal' }\n  ])*/\n\n  const updateCacheSlider = (index: number, newSlider: SliderOptions) => {\n    let currentSlider = { ...cacheSliders[index] };\n    setCacheSliders([\n      ...cacheSliders.slice(0, index),\n      {\n        text: newSlider.text || currentSlider.text,\n        //datasource: newButton.datasource || currentButton.datasource,\n        url: newSlider.url || currentSlider.url,\n        //variant: newButton.variant || currentButton.variant,\n        min: newSlider.min || currentSlider.min,\n        max: newSlider.max || currentSlider.max,\n        orientation: newSlider.orientation || currentSlider.orientation,\n        width: newSlider.width || currentSlider.width,\n        height: newSlider.height || currentSlider.height,\n        currentValue: undefined\n      },\n      ...cacheSliders.slice(index + 1),\n    ]);\n  };\n\n  return (\n    <React.Fragment>\n      {cacheSliders.map((s: SliderOptions, i: number) => (\n\n        <Collapse\n          key={i}\n          label={'Slider ' + (i + 1).toString()}\n          isOpen={isOpen[i]}\n          collapsible\n          onToggle={() => {\n            setOpen((open) => [...open.slice(0, i), !open[i], ...open.slice(i + 1)]);\n          }}\n        >\n          <Field label=\"Text\" description={\"Text to be displayed on the Slider\"}>\n            <Input\n              id={'t-' + i.toString()}\n              value={s.text}\n              placeholder=\"Slider name\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateCacheSlider(i, { text: e.target.value })}\n            />\n          </Field>\n          <Field label=\"Width\" description={\"Width of the Slider\"}>\n            <Input\n              id={'w-' + i.toString()}\n              value={s.width}\n              placeholder=\"100px\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateCacheSlider(i, { width: e.target.value })}\n            />\n          </Field>\n          <Field label=\"Height\" description={\"Height of the Slider\"}>\n            <Input\n              id={'h-' + i.toString()}\n              value={s.height}\n              placeholder=\"200px\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateCacheSlider(i, { height: e.target.value })}\n            />\n          </Field>{/* non va \n          <Field label=\"Orientation\" description=\"Choose the orientation\">\n            <Select\n              id={'o-' + i.toString()}\n              onChange={(e: SelectableValue<string>) => updateCacheSlider(i, { orientation: e.value })}\n              value={s.orientation}\n              options={elems}\n            />\n          </Field>*/}\n           <Field label=\"Min value\" description={\"Min value of the Slider\"}>\n            <Input\n              id={'mv-' + i.toString()}\n              value={s.min}\n              placeholder=\"0\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateCacheSlider(i, { min: Number(e.target.value) })}\n            />\n          </Field>\n          <Field label=\"Max value\" description={\"Max value of the Slider\"}>\n            <Input\n              id={'Mv-' + i.toString()}\n              value={s.max}\n              placeholder=\"100\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateCacheSlider(i, { max: Number(e.target.value) })}\n            />\n          </Field>\n          <Field label=\"Url\" description=\"Url to call on click\">\n            <TextArea\n              id={'u-' + i.toString()}\n              value={s.url}\n              placeholder=\"http://...\"\n              rows={5}\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => updateCacheSlider(i, { url: e.target.value })}\n            />\n          </Field>\n          <Field>\n            <>\n              <Button\n                icon=\"trash-alt\"\n                variant=\"destructive\"\n                onClick={() => onChange([...sliders.slice(0, i), ...sliders.slice(i + 1)])}\n              >\n                Delete\n              </Button>\n              <Button icon=\"save\" variant=\"primary\" onClick={() => onChange(cacheSliders)}>\n                Apply\n              </Button>\n            </>\n          </Field>\n        </Collapse>\n      ))}\n      <Field>\n        <Button\n          variant=\"secondary\"\n          icon=\"plus\"\n          size=\"sm\"\n          onClick={() => {\n            onChange([...sliders, { text: '', url: '', min: 0, max: 100, orientation:'vertical', width:'100px', height:'200px', currentValue: undefined}]);\n          }}\n        >\n          Add Slider\n        </Button>\n      </Field>\n    </React.Fragment>\n  );\n};\n\n\nexport function addEditor(builder: PanelOptionsEditorBuilder<Options>) {\n  builder\n    .addRadio({\n      path: 'orientation',\n      name: 'Orientation',\n      description: 'Stacking direction in case of multiple buttons',\n      defaultValue: 'horizontal',\n      settings: {\n        options: [\n          { value: 'horizontal', label: 'Horizontal' },\n          { value: 'vertical', label: 'Vertical' },\n        ],\n      },\n    })\n    .addCustomEditor({\n      id: 'buttons',\n      path: 'buttons',\n      name: 'Button Configuration',\n      defaultValue: [{ text: '', url: '' }],\n      editor: (props) => <EditorButton buttons={props.value} onChange={props.onChange} />,\n    })\n    .addCustomEditor({\n      id: 'sliders',\n      path: 'sliders',\n      name: 'Slider Configuration',\n      defaultValue: [{ text: '', url: '', min: 0, max: 100, orientation:'vertical', width:'100px', height:'200px' }],\n      editor: (props) => <EditorSlider sliders={props.value} onChange={props.onChange} />,\n    });\n}\n","import { PanelPlugin } from '@grafana/data';\nimport { ElementPanel } from './elementPanel';\nimport { addEditor } from './editor';\nimport { Options } from './types';\n\nexport const plugin = new PanelPlugin<Options>(ElementPanel);\n\nplugin.setPanelOptions((builder) => addEditor(builder));\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__305__","__WEBPACK_EXTERNAL_MODULE__388__","__WEBPACK_EXTERNAL_MODULE__650__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","postQuery","button","currentValue","replaceVariables","url","console","log","api_key","host_port","deviceId","$","ajax","type","headers","success","result","error","EditorButton","buttons","onChange","isOpen","setOpen","React","map","e","cacheButtons","setCacheButtons","updateCacheButtons","index","newButton","currentButton","slice","text","variant","b","i","Collapse","label","toString","collapsible","onToggle","open","Field","description","Input","id","placeholder","target","TextArea","rows","RadioButtonGroup","options","fullWidth","Button","icon","onClick","size","EditorSlider","sliders","cacheSliders","setCacheSliders","updateCacheSlider","newSlider","currentSlider","min","max","orientation","width","height","s","Number","plugin","PanelPlugin","slidersValue","setSlidersValue","renderButtons","useEffect","slider","structuredClone","concat","renderSliders","orient","div","style","span","textAlign","display","paddingLeft","Slider","included","v","step","VerticalGroup","justify","align","length","HorizontalGroup","setPanelOptions","builder","addRadio","path","name","defaultValue","settings","addCustomEditor","editor","props","addEditor"],"sourceRoot":""}